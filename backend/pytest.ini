[pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Pytest options
addopts = 
    -v
    -ra
    -l
    --strict-markers
    --strict-config
    --cov=app
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --asyncio-mode=auto
    -W ignore::DeprecationWarning
    -s

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Custom markers for test categorization
markers =
    unit: Unit tests (fast, isolated, no external dependencies)
    integration: Integration tests (requires database, APIs)
    slow: Slow-running tests (> 1 second)
    agents: Tests for agent implementations
    mcp: Tests for MCP tools
    api: Tests for API endpoints
    websocket: Tests for WebSocket connections
    database: Tests requiring database access
    redis: Tests requiring Redis connection

# Coverage configuration
[coverage:run]
source = app
omit =
    */tests/*
    */__pycache__/*
    */site-packages/*
    */.venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if __name__ == .__main__.:
    raise AssertionError
    raise NotImplementedError
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    pass

show_missing = True
skip_covered = False
fail_under = 70
