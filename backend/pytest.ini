[pytest]
# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Add options for test execution
addopts = 
    # Verbose output
    -v
    # Show summary of all test outcomes
    -ra
    # Strict marker checking
    --strict-markers
    # Coverage reporting
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    # Fail on warnings
    --strict-config
    # Show local variables in tracebacks
    -l
    # Disable warnings summary
    --disable-warnings
    # Async support
    --asyncio-mode=auto

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (requires external services)
    slow: Slow running tests
    agents: Tests for agent implementations
    mcp: Tests for MCP tools
    api: Tests for API endpoints
    websocket: Tests for WebSocket connections

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*
    .venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if __name__ == .__main__.:
    raise AssertionError
    raise NotImplementedError
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod

# Show lines that should be covered but aren't
show_missing = True

# Fail if coverage is below this threshold
fail_under = 70
