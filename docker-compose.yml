version: '3.9'

# =============================================================================
# SERVICES
# =============================================================================
services:
  # ---------------------------------------------------------------------------
  # Backend Service - FastAPI + LangGraph Agents
  # ---------------------------------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: agenticai-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Load from .env file
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - API_KEY=${API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER:-groq}
      - GROQ_MODEL_NAME=${GROQ_MODEL_NAME:-llama-3.3-70b-versatile}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      # Mount data directory for uploads and cache
      - ./backend/data:/app/data
      # Hot reload in development (comment out in production)
      # - ./backend/app:/app/app
    depends_on:
      - redis-local
    networks:
      - agenticai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      # test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ---------------------------------------------------------------------------
  # Frontend Service - Next.js
  # ---------------------------------------------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: agenticai-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - HOSTNAME=0.0.0.0
      - NODE_ENV=production
      - BACKEND_URL=http://backend:8000
      # - NEXT_PUBLIC_API_URL=http://localhost:8000
      # - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
      # - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - agenticai-network
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3000/api/health || exit 1"]
      # test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ---------------------------------------------------------------------------
  # Redis Local - For development/testing cache
  # Optional: Remove if using cloud Redis exclusively
  # ---------------------------------------------------------------------------
  redis-local:
    image: redis:7-alpine
    container_name: agenticai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-devredispass}
    volumes:
      - redis-data:/data
    networks:
      - agenticai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  agenticai-network:
    driver: bridge

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  redis-data:
    driver: local
