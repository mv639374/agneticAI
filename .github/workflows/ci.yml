name: CI Pipeline

# Trigger on push to main/dev and all pull requests
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

# Define jobs
jobs:
  # ============================================================================
  # BACKEND CI
  # ============================================================================
  backend-ci:
    name: Backend Checks
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Setup Python
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      # Install UV package manager
      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      # Cache dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      
      # Install dependencies
      - name: Install dependencies
        working-directory: backend
        run: |
          uv venv
          source .venv/bin/activate
          uv sync
      
      # Code formatting check with Ruff
      - name: Check code formatting
        working-directory: backend
        run: |
          source .venv/bin/activate
          # Check if code is formatted (don't auto-format in CI)
          uv run ruff format --check .
      
      # Linting with Ruff
      - name: Lint code
        working-directory: backend
        run: |
          source .venv/bin/activate
          # Run linter to catch code quality issues
          uv run ruff check . --output-format=github
      
      # Type checking with mypy (optional, uncomment when ready)
      # - name: Type checking
      #   working-directory: backend
      #   run: |
      #     source .venv/bin/activate
      #     uv run mypy app --ignore-missing-imports
      
      # Security scanning (optional)
      # - name: Security scan
      #   working-directory: backend
      #   run: |
      #     source .venv/bin/activate
      #     uv pip install bandit
      #     bandit -r app -f json -o bandit-report.json
      
      # Placeholder for tests (will add later)
      # - name: Run tests
      #   working-directory: backend
      #   run: |
      #     source .venv/bin/activate
      #     pytest --cov --cov-report=xml
      
      # Upload test results (uncomment when tests added)
      # - name: Upload coverage
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: backend/coverage.xml
      #     flags: backend
  
  # ============================================================================
  # FRONTEND CI
  # ============================================================================
  frontend-ci:
    name: Frontend Checks
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Setup Node.js
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      # Install dependencies
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      # Linting with ESLint
      - name: Lint code
        working-directory: frontend
        run: npm run lint
      
      # Type checking with TypeScript
      - name: Type checking
        working-directory: frontend
        run: npx tsc --noEmit
      
      # Build check (ensure production build works)
      - name: Build frontend
        working-directory: frontend
        run: npm run build
      
      # Placeholder for tests (will add later)
      # - name: Run tests
      #   working-directory: frontend
      #   run: npm test -- --coverage
      
      # Upload build artifacts (optional)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next
          retention-days: 7
  
  # ============================================================================
  # DOCKER BUILD CHECK
  # ============================================================================
  docker-build:
    name: Docker Build Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Setup Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Build backend Docker image (don't push)
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: agenticai-backend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Build frontend Docker image (don't push)
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: agenticai-frontend:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  # ============================================================================
  # SUMMARY JOB
  # ============================================================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, docker-build]
    if: always()
    
    steps:
      - name: Check CI status
        run: |
          echo "Backend CI: ${{ needs.backend-ci.result }}"
          echo "Frontend CI: ${{ needs.frontend-ci.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          if [ "${{ needs.backend-ci.result }}" != "success" ] || \
             [ "${{ needs.frontend-ci.result }}" != "success" ] || \
             [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          fi
          
          echo "✅ All CI Checks Passed"
